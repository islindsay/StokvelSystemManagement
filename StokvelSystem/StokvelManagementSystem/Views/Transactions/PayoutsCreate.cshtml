@model StokvelManagementSystem.Models.Payout
@{
    ViewData["Title"] = "Create New Payout";
}

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center py-3">
            <h4 class="mb-0">@ViewData["Title"] <span style="font-size: 0.875rem;">(Balance @Model.Currency @Model.TotalContributions / @Model.Currency @Model.ExpectedPayment) Payable from @Model.NextPayoutDate?.ToString("dd MMMM yyyy")</span></h4>
            <div class="text-end">
                <span class="badge bg-light text-dark fs-6">
                    <i class="bi bi-calendar me-2"></i>@DateTime.Now.ToString("dd MMMM yyyy")
                </span>
            </div>
        </div>

        <div class="card-body">
            <form asp-action="PayoutsCreate" asp-route-groupId="@Model.GroupId" method="post" enctype="multipart/form-data" class="needs-validation" novalidate>
                <div asp-validation-summary="ModelOnly" class="alert alert-danger mb-4"></div>

              <div class="form-group mb-3">
                                <label class="form-label fw-bold">Group Name</label>
                                <input type="text" class="form-control" value="@Model.GroupName" readonly>
                            </div>
                @* <div class="mb-4 p-3 border rounded bg-light">
                    <h5 class="mb-3 text-primary">
                </h5>
                    <div class="form-group">
                        <label asp-for="ProofOfPaymentPath" class="form-label fw-bold">Upload Receipt</label>
                        <div class="custom-file">
                            <input type="file" class="form-control" name="proofFile" accept=".pdf,.jpg,.png" multiple>
                            <div class="invalid-feedback">Please upload a valid file (PDF, JPG, PNG).</div>
                           
                        </div>
                    </div>
                </div> *@

            
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="p-3 border rounded bg-light h-100">
                            <h5 class="mb-3 text-primary">
                                <i class="bi bi-person-circle me-2"></i>Member Details @if (Model.PayoutTypeID != 2)
                                {<span style="font-size: 0.875rem; text-right" class="text-muted"> (Next Up - @Model.NextMember?.FullName)</span>}
                            </h5>

        @if (Model.PayoutTypeID != 2)
                    {
                     <div class="form-group mb-3">

                    <label class="form-label fw-bold">Member</label>
                        <input type="text"
                        class="form-control"
                        value="@Model.Member?.FullName"
                        readonly />

                    <input type="hidden" name="MemberId" value="@Model.Member?.MemberId" />
                    <input type="hidden" name="MemberGroupId" value="@Model.Member?.Id" />
                    
                  
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label fw-bold">Email</label>
                        <input type="text"
                            class="form-control"
                            value="@Model.Member?.Email"
                            readonly />
                    </div>

                    <div class="form-group mb-3">
                        <label class="form-label fw-bold">Phone</label>
                        <input type="text"
                            class="form-control"
                            value="@Model.Member?.Phone"
                            readonly />
                    </div>
                }
                @if (Model.PayoutTypeID == 2)
                    {
                    <div class="form-group mb-3">

                            <label class="form-label fw-bold">Member</label>
                                <input type="text"
                                class="form-control"
                                value="Everyone"
                                readonly />              
                  
                    </div>
                    }

                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="p-3 border rounded bg-light h-100">
                            <h5 class="mb-3 text-primary">
                                <i class="bi bi-credit-card me-2"></i>Payment Information
                            </h5>
                            <div class="form-group mb-3">
                                <label asp-for="PayoutTypeId" class="form-label fw-bold">Payment Method</label>
                                <select asp-for="PayoutTypeId" class="form-select" required
                                        asp-items="@(new SelectList(Model.PayoutTypes, "Value", "Text"))">
                                    <option value="">-- Select Type --</option>
                                </select>
                                <span asp-validation-for="PayoutTypeId" class="text-danger"></span>
                            </div>
                            
                            <div class="form-group mb-3">
                                <label asp-for="Amount" class="form-label fw-bold">Amount (@Model.Currency)</label>
                                <div class="input-group">
                                    <input asp-for="Amount" class="form-control" type="number" step="0.01" min="5" value="@(Model.ExpectedPayment)" readonly required>
                                </div>
                                <span asp-validation-for="Amount" class="text-danger"></span>
                            </div>
                            
                            <div class="form-group mb-3">
                                <label asp-for="PayoutDate" class="form-label fw-bold">Payout Date</label>
                                <input asp-for="PayoutDate" type="date" class="form-control" required>
                                <span asp-validation-for="PayoutDate" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mb-4 p-3 border rounded bg-light">
                    <h5 class="mb-3 text-primary">
                        <i class="bi bi-card-text me-2"></i>Card Information
                    </h5>
                                        <div class="row g-2 mb-3">
                        <div class="col-6">
                            <label for="AccountNumber" class="form-label fw-bold">Account Number</label>
                            <input id="AccountNumber" 
                                name="AccountNumber" 
                                class="form-control" 
                                type="text" 
                                pattern="\d{13,19}" 
                                title="Enter a valid account number (13–19 digits)" 
                                required>
                            <div id="accountError" class="text-danger mt-1"></div>
                        </div>

                        <div class="col-3">
                            <label for="CVC" class="form-label fw-bold">CVC</label>
                            <input id="CVC" 
                                name="CVC" 
                                class="form-control " 
                                 placeholder="123"
                                maxlength="3"
                                type="text" 
                                pattern="\d{3}" 
                                title="Enter a valid CVC (3 digits)" 
                                required>
                            <div id="cvcError" class="text-danger mt-1"></div>
                        </div>

                        <div class="col-3">
                            <label for="Expiry" class="form-label fw-bold">Expiry Date</label>
                            <input id="Expiry" 
                                name="Expiry" 
                                class="form-control " 
                                maxlength="5"
                                placeholder="MM/YY"
                                type="text" 
                                pattern="\d{2}/\d{2}" 
                                title="Enter a valid Expiry date" 
                                required>
                            <div id="expiryError" class="text-danger mt-1"></div>
                        </div>
                    </div>
                </div>               

             
                <div class="mb-4 p-3 border rounded bg-light">
                    <h5 class="mb-3 text-primary">
                        <i class="bi bi-pencil-square me-2"></i>Additional Information
                    </h5>
                    <div class="form-group">
                        <label asp-for="Reference" class="form-label fw-bold">Reference</label>
                        <input asp-for="Reference" class="form-control" placeholder="e.g., July Payout">
                        <span asp-validation-for="Reference" class="text-danger"></span>
                    </div>
                </div>

                <!-- Buttons -->
                <div class="d-flex justify-content-end gap-2 mt-4">
                    <a asp-action="PayoutIndex" asp-route-groupId="@Model.GroupId" class="btn btn-outline-secondary px-4">
                        <i class="bi bi-x-circle me-2"></i>Cancel
                    </a>
                    @* <button type="submit" class="btn btn-primary px-4" @((Model.EnablePayout == true || DateTime.Now.Date > Model.NextPayoutDate?.Date) ? "" : "disabled")></button> *@
                    <button type="submit" class="btn btn-primary px-4" @(Model.EnablePayout == false ? "" : "disabled")>
                        <i class="bi bi-check-circle me-2"></i>Submit Payout
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/transactions.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css">
    <style>
        .card {
            border-radius: 10px;
        }
        .form-control:read-only {
            background-color: #f8f9fa;
        }
        .input-group-text {
            background-color: #e9ecef;
        }
        .bg-light {
            background-color: #f8f9fa!important;
        }
    </style>
}

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        $(document).ready(function () {
            // Auto-fill member contact info when member is selected
            const memberSelect = document.getElementById('MemberDropdown');
            const phoneInput = document.getElementById('Phone');
            const emailInput = document.getElementById('Email');

            if (memberSelect && phoneInput && emailInput) {
                memberSelect.addEventListener('change', function () {
                    const selectedOption = this.options[this.selectedIndex];
                    phoneInput.value = selectedOption.getAttribute('data-phone') || '';
                    emailInput.value = selectedOption.getAttribute('data-email') || '';
                });
            }

            // Form validation
            (function () {
                'use strict';
                const forms = document.querySelectorAll('.needs-validation');
                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', event => {
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            })();
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const accountInput = document.getElementById("AccountNumber");
            const cvcInput = document.getElementById("CVC");
            const expiryInput = document.getElementById("Expiry");

            const accountError = document.getElementById("accountError");
            const cvcError = document.getElementById("cvcError");
            const expiryError = document.getElementById("expiryError");

            const payNowButton = document.querySelector("button[type='submit']");

            // ✅ Luhn check
            function isValidLuhn(number) {
                let sum = 0;
                let shouldDouble = false;
                for (let i = number.length - 1; i >= 0; i--) {
                    let digit = parseInt(number[i], 10);
                    if (shouldDouble) {
                        digit *= 2;
                        if (digit > 9) digit -= 9;
                    }
                    sum += digit;
                    shouldDouble = !shouldDouble;
                }
                return sum % 10 === 0;
            }

            // ✅ Enable/disable button
            function checkFormValidity() {
                if (
                    accountInput.checkValidity() &&
                    cvcInput.checkValidity() &&
                    expiryInput.checkValidity()
                ) {
                    payNowButton.disabled = false;
                } else {
                    payNowButton.disabled = true;
                }
            }

            // --- Account Number Validation ---
            accountInput.addEventListener("input", () => {
                const value = accountInput.value.replace(/\s+/g, "");
                if (value.length >= 13 && value.length <= 19 && isValidLuhn(value)) {
                    accountInput.setCustomValidity("");
                    accountError.textContent = "";
                } else {
                    accountInput.setCustomValidity("Invalid account number");
                    accountError.textContent = "Invalid account number";
                }
                checkFormValidity();
            });

            // --- CVC Validation ---
            cvcInput.addEventListener("input", () => {
                const value = cvcInput.value.trim();
                if (/^\d{3,4}$/.test(value)) {
                    cvcInput.setCustomValidity("");
                    cvcError.textContent = "";
                } else {
                    cvcInput.setCustomValidity("Invalid CVC");
                    cvcError.textContent = "CVC must be 3 or 4 digits";
                }
                checkFormValidity();
            });

            // --- Expiry Validation ---
            expiryInput.addEventListener("input", () => {
                const value = expiryInput.value.trim();
                const match = /^(\d{2})\/(\d{2})$/.exec(value); // MM/YY
                if (match) {
                    const month = parseInt(match[1], 10);
                    const year = parseInt(match[2], 10) + 2000;
                    const expiryDate = new Date(year, month - 1, 1);
                    const today = new Date();
                    today.setDate(1); // compare month
                    if (expiryDate >= today && month >= 1 && month <= 12) {
                        expiryInput.setCustomValidity("");
                        expiryError.textContent = "";
                        checkFormValidity();
                        return;
                    }
                }
                expiryInput.setCustomValidity("Invalid Expiry");
                expiryError.textContent = "Expiry must be valid and not in the past";
                checkFormValidity();
            });

            // Run initial validation
            checkFormValidity();
        });
    </script>
}
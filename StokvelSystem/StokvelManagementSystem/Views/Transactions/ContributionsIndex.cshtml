@model IEnumerable<StokvelManagementSystem.Models.Contribution>
@{
    ViewData["Title"] = "Contributions";
    var groupId = Context.Request.Query["groupId"];
    var contributions = Model ?? Enumerable.Empty<StokvelManagementSystem.Models.Contribution>();
}

<div class="container mt-4">

    <!-- Back Arrow -->
    <div class="mb-3">
        <a href="@Url.Action("JoinRequestsDashboard", "Groups", new { groupId = groupId, status = "Accepted" })" 
        class="btn btn-link text-primary d-flex text-decoration-none align-items-center">
            <i class="bi bi-arrow-left me-2"></i> Back to Dashboard
        </a>
    </div>

    <!-- Header with Create Button -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="mb-0">
            <i class="bi bi-cash-stack me-2"></i>@ViewData["Title"]
        </h2>
        <h6>
            Current Cycle: @ViewBag.CurrentCycle
        </h6>

        @{
            var isAdminCookie = Context.Request.Cookies["isAdmin"];
            var isAdmin = !string.IsNullOrEmpty(isAdminCookie) && isAdminCookie == "true";
        }
        @if (!ViewBag.GroupClosed && !ViewBag.AccountPaused && !ViewBag.AccountDeactivated)
        {
            <a asp-action="CreateContributionForm" 
            asp-route-groupId="@groupId" 
            class="btn btn-primary @(ViewBag.HasContributedThisCycle && ViewBag.Refunded == false ? "disabled" : "")">
                <i class="bi bi-plus-circle me-1"></i>New Contribution
            </a>
        }
    </div>

    <!-- Success Message -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Contributions Table -->
    <div class="card shadow-sm">
        <div class="card-body p-0">
            @if (!contributions.Any())
            {
                <div class="text-center py-5">
                    <i class="bi bi-database-exclamation fs-1 text-muted"></i>
                    <p class="mt-3 text-muted">No contributions found</p>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                              <th><i class="bi bi-people me-1"></i>Group</th>
                                <th><i class="bi bi-person me-1"></i>Member</th>
                                <th class=""><i ></i>Contribution</th>
                                <th class=""><i class="bi bi-exclamation-triangle me-1"></i>Penalty</th>
                                <th class=""><i class="bi bi-calculator me-1"></i>Total</th>
                                <th><i class="bi bi-calendar me-1"></i>Date</th>
                                @* <th><i class="bi bi-tag me-1"></i>Reference ID</th> *@
                                @* <th><i class="bi bi-receipt me-1"></i>Proof</th> *@
                                <th><i class="bi bi-person-plus me-1"></i>Recorded By</th>
                                 <th><i class="me-1"></i>Cycle</th>
                                <th><i class=" me-1"></i>Action</th>
                                <th><i class=" me-1"></i>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in contributions)
                            {
                                <tr>
                                    <td>@(item.GroupName ?? "N/A")</td>
                                    <td>@(item.FirstName ?? "N/A")</td>
                                    <td class=" text-primary"><span class="fw-bold text-muted">@item.CurrencySymbol</span> @item.ContributionAmount</td>
                                    <td class=" text-primary @(item.PenaltyAmount > 0 ? "text-danger" : "")"><span class="fw-bold text-muted">@item.CurrencySymbol</span> @item.PenaltyAmount</td>
                                    <td class=" fw-bold text-primary"><span class="fw-bold text-muted">@item.CurrencySymbol</span> @item.TotalAmount</td>
                                    <td>@item.TransactionDate.ToString("dd MMM yyyy")</td>
                                    <td>@item.CreatedBy</td>
                                     <td>@item.PaidForCycle</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-outline-primary view-details-btn"
                                            data-id="@item.ID"
                                            data-group="@item.GroupName"
                                            data-member="@item.FirstName"
                                            data-contribution="@item.ContributionAmount"
                                            data-penalty="@item.PenaltyAmount"
                                            data-total="@item.TotalAmount"
                                            data-date="@item.TransactionDate.ToString("dd MMM yyyy")"
                                            data-createdby="@item.CreatedBy"
                                            data-currency="@item.CurrencySymbol"
                                            data-accountnumber="@item.AccountNumber"
                                            data-status="@item.Status"
                                            data-cvc="@item.CVC"
                                            data-expiry="@item.Expiry">
                                            <i class="bi bi-eye"></i> View
                                        </button>

                                    </td>
                                    <td>
                                        @if (item.Status == "Success")
                                        {
                                            <span class="badge bg-success">@item.Status</span>
                                        }
                                        else if (item.Status == "Fail")
                                        {
                                            <span class="badge bg-danger">Failed</span>
                                        }
                                        else if (item.Status == "Pending")
                                        {
                                            <span class="badge bg-warning">@item.Status</span>
                                        }
                                        else
                                        {
                                             <span class="badge bg-secondary">@item.Status</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="contributionModal" tabindex="-1" aria-labelledby="contributionModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="contributionModalLabel">Contribution Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
        <div class="modal-body">
            <p><strong>Group Name:</strong> <span id="modalGroupName"></span></p>
            <p><strong>Member Name:</strong> <span id="modalMemberName"></span></p>
            <p><strong>Contribution:</strong> <span id="modalContribution"></span></p>
            <p><strong>Penalty:</strong> <span id="modalPenalty"></span></p>
            <p><strong>Total:</strong> <span id="modalTotal"></span></p>
            <p><strong>Transaction Date:</strong> <span id="modalDate"></span></p>
            <p><strong>Recorded By:</strong> <span id="modalCreatedBy"></span></p>
            <p><strong>Status</strong> <span id="modalStatus"></span></p>
            
            <!-- Add these new fields -->
            <p><strong>Account Number:</strong> <span id="modalAccountNumber"></span></p>
            <p><strong>CVC:</strong> <span id="modalCVC"></span></p>
            <p><strong>Expiry:</strong> <span id="modalExpiry"></span></p>
        </div>
        

        <div class="modal-footer d-flex justify-content-between" >
            @if(ViewBag.HasContributedThisCycle && !ViewBag.IsMemberNotAdmin){
                 <button type="button" class="btn btn-danger" id="refundBtn" onclick="refundContribution()">Refund</button>
            }
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>

    </div>
  </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
            document.querySelectorAll(".view-details-btn").forEach(button => {
                button.addEventListener("click", function () {

                            // store ID on modal itself
                    const modalElement = document.getElementById('contributionModal');
                    modalElement.dataset.contributionId = this.dataset.id;
                    
                    document.getElementById("modalGroupName").textContent = this.dataset.group;
                    document.getElementById("modalMemberName").textContent = this.dataset.member;
                    document.getElementById("modalContribution").textContent = this.dataset.currency + " " + this.dataset.contribution;
                    document.getElementById("modalPenalty").textContent = this.dataset.currency + " " + this.dataset.penalty;
                    document.getElementById("modalTotal").textContent = this.dataset.currency + " " + this.dataset.total;
                    document.getElementById("modalDate").textContent = this.dataset.date;
                    document.getElementById("modalCreatedBy").textContent = this.dataset.createdby;
                    document.getElementById("modalStatus").textContent = this.dataset.status;


                    document.getElementById("modalAccountNumber").textContent =
                        this.dataset.accountnumber
                        ? "**** **** **** " + this.dataset.accountnumber.slice(-4)
                        : "";

                    document.getElementById("modalCVC").textContent = this.dataset.cvc;
                    document.getElementById("modalExpiry").textContent = this.dataset.expiry;

                    // Show/hide Refund button if status is already refunded
                    const refundBtn = document.getElementById("refundBtn");

                    if (refundBtn){
                         if (this.dataset.status === "Refunded") {
                        refundBtn.classList.add("d-none");
                        } else if (this.dataset.status === "Success") {
                            refundBtn.classList.remove("d-none");
                        }
                    }
                   

                    var modal = new bootstrap.Modal(document.getElementById('contributionModal'));
                    modal.show();
                });
            });



        $(document).ready(function () {
            // Calculate total dynamically
            function calculateTotal() {
                const contribution = parseFloat($('#ContributionAmount').val()) || 0;
                const penalty = parseFloat($('#PenaltyAmount').val()) || 0;
                $('#TotalAmount').val((contribution + penalty).toFixed(2));
            }

            $('#ContributionAmount, #PenaltyAmount').on('input', calculateTotal);

            // Form validation
            (function () {
                'use strict';
                const forms = document.querySelectorAll('.needs-validation');
                Array.from(forms).forEach(form => {
                    form.addEventListener('submit', event => {
                        if (!form.checkValidity()) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            })();
        });

        function refundContribution() {
            const modal = document.getElementById('contributionModal');
            const contributionId = modal.dataset.contributionId;

            console.log('Refunding contribution with ID:', contributionId);

            if (!contributionId) return;
            if (!confirm("Are you sure you want to refund this contribution?")) return;

            // Send contributionId as query string
            fetch(`/Contributions/RefundContribution?contributionId=${contributionId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // if using anti-forgery
                }
            })
            .then(response => response.json())
            .then(data => {
                alert(data.message);
                if (data.success) location.reload();
            })
            .catch(err => console.error(err));
        }

    </script>
}

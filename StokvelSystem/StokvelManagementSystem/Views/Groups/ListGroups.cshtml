@model StokvelManagementSystem.Models.Group

@{
    ViewData["Title"] = "Group Dashboard";

    var showNewTab = Context.Request.Query["showNewTab"] == "true";
    var showJoinedTab = !showNewTab;
    var isAdminCookie = Context.Request.Cookies["isAdmin"];
    var isAdmin = isAdminCookie != null && isAdminCookie.ToLower() == "true";
}

<link rel="stylesheet" href="~/css/stokvel-cards.css" />
<link rel="stylesheet" href="~/css/CreateTab.css" />


<h2 style="font-size: 2.2rem; font-weight: 800; color: #0d6efd; border-bottom: 4px solid #0d6efd; padding-bottom: 0.5rem; margin-bottom: 2rem; display: flex; align-items: center; gap: 0.5rem;">
    <i class="bi bi-grid-3x3-gap-fill" style="font-size: 1.8rem; color: #0d6efd;"></i>
    Group Dashboard
</h2>



@if (Model.GroupCreated)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        Group created successfully!
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<ul class="nav nav-pills custom-tabs mb-4" id="groupTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <a class="nav-link active" id="joined-tab" data-bs-toggle="tab" href="#joined" role="tab">
            <i class="bi bi-people-fill me-1"></i>Joined
        </a>
    </li>
    <li class="nav-item" role="presentation">
        <a class="nav-link" id="new-tab" data-bs-toggle="tab" href="#new" role="tab">
            <i class="bi bi-stars me-1"></i>New
        </a>
    </li>

    
        <li class="nav-item" role="presentation">
            <a class="nav-link" id="create-tab" data-bs-toggle="tab" href="#create" role="tab">
                <i class="bi bi-plus-circle me-1"></i>Create
            </a>
        </li>
    
</ul>


<div class="tab-content" id="groupTabsContent">
    <!-- Joined Tab -->

    <div class="tab-pane fade @(showJoinedTab ? "show active" : "") p-3" id="joined" role="tabpanel">
        <h4 class="text-primary fw-bold"><i class="bi bi-people-fill me-2"></i>Joined Groups</h4>
        @if (Model.MyGroups != null && Model.MyGroups.Any())
        {
            var frequencies = new[] { "Daily", "Monthly", "Annually","Weekly", "Periodic" };

            foreach (var freq in frequencies)
            {
                var groups = Model.MyGroups.Where(g => g.FrequencyName == freq).ToList();
                if (groups.Any())
                {
                    <div class="group-section mb-5">
                        <h4 class="mb-3">@freq Groups</h4>
                        <div class="row">
                @foreach (var group in groups)
                {
                    <div class="col-md-4">
                        <a asp-controller="Contributions" asp-action="ContributionsIndex" asp-route-groupId="@group.ID" class="text-decoration-none text-dark">
                            <div class="card shadow-sm mb-4 group-card" style="cursor: pointer;">
                                <div class="frequency-accent @freq"></div>
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="card-title mb-0">@group.GroupName</h5>
                                    <a asp-controller="Groups"
                                    asp-action="JoinRequestsDashboard"
                                    asp-route-groupId="@group.ID"
                                    class="btn btn-success btn-sm px-3 py-1 shadow-sm"
                                    style="font-size: 0.875rem;"
                                    onclick="event.stopPropagation();">
                                        <i class="bi bi-speedometer2 me-1" style="font-size: 0.9rem;"></i>Dashboard
                                    </a>
                                    </div>

                             
                                    <p class="card-text"><strong>Contribution:</strong> @($"{(group.Currency ?? "R")} {(group.ContributionAmount?.ToString("0.00") ?? "0.00")}")</p>
                                    <p class="card-text"><strong>Members:</strong> Up to @group.MemberLimit</p>
                                    <p class="card-text"><strong>Payout Type:</strong> @group.PayoutType</p>
                                    <p class="card-text"><strong>Frequency:</strong> @group.FrequencyName</p>
                                    <p class="card-text"><strong>Duration:</strong> @group.Duration</p>
                                    <p class="card-text"><strong>Start Date:</strong> @(group.StartDate?.ToShortDateString() ?? "Not Set")</p>
                                    <p class="card-text"><strong>Penalty:</strong> @($"{(group.Currency ?? "R")} {(group.PenaltyAmount.ToString("0.00") ?? "0.00")} after {group.PenaltyGraceDays} days")</p>
                                    <p class="card-text"><strong>Deferrals:</strong> @(group.AllowDeferrals ? "Allowed" : "Not Allowed")</p>

                              @if (!group.HideRequestToLeave)
                                    {
                                        <div class="card-actions">
                                            <form asp-action="RequestToLeave" method="post" onsubmit="event.stopPropagation();">
                                                <input type="hidden" name="groupId" value="@group.ID" />
                                                <input type="hidden" name="nationalId" value="@Model.SearchNationalId" />
                                                <button type="submit" class="btn btn-outline-danger px-4 py-2 shadow-sm" style="font-size: 0.875rem;">
                                                    <i class="bi bi-box-arrow-right me-1" style="font-size: 0.9rem;"></i>Request to Leave
                                                </button>
                                            </form>
                                        </div>
                                    }

                                </div>
                            </div>
                        </a>
                    </div>
                }

                        </div>
                    </div>
                }
            }
        }
        else if (Model.MemberId > 0)
        {
            <p class="text-muted">You haven't joined any groups yet.</p>
        }
    </div>

    <!-- New Tab -->
        
        <div class="tab-pane fade @(showNewTab ? "show active" : "") p-3" id="new" role="tabpanel">
            <h4 class="text-primary fw-bold"><i class="bi bi-people-fill me-2"></i>New Groups</h4>
            <div id="newGroupsContainer">
                
             

            </div>
        </div>
          <!-- CreateTab -->

    <div class="tab-pane fade p-4" id="create" role="tabpanel">
        <h3 class="mb-4 text-primary fw-bold">
            <i class="bi bi-plus-circle me-2"></i>Create a New Group
        </h3>

<form asp-controller="Groups" asp-action="CreateGroup" method="post" id="createGroupForm">
    @Html.AntiForgeryToken()
    <input type="hidden" name="MemberId" value="@Model.MemberId" />

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <h5 class="mb-2">Please correct the following errors:</h5>
            <ul class="mb-0">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <li>@error.ErrorMessage</li>
                }
            </ul>
        </div>
    }

    <!-- Group Information -->
    <h5 class="mt-4 fw-semibold text-secondary">Group Information</h5>
    <div class="row g-4">
        <div class="col-md-6">
            <label asp-for="GroupName" class="form-label">Group Name</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-people-fill"></i></span>
                <input asp-for="GroupName" class="form-control" placeholder="e.g. Investment Circle" />
            </div>
            <span asp-validation-for="GroupName" class="text-danger small"></span>
        </div>
    </div>

    <!-- Contribution Details -->
    <h5 class="mt-5 fw-semibold text-secondary">Contribution Details</h5>
    <div class="row g-4">
        <div class="col-md-4">
            <label asp-for="ContributionAmount" class="form-label">Contribution Amount</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-cash-coin"></i></span>
                <input asp-for="ContributionAmount" class="form-control" id="ContributionAmount" />
            </div>
            <span asp-validation-for="ContributionAmount" class="text-danger small"></span>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const contributionAmountInput = document.getElementById('ContributionAmount');
                const currencySelect = document.getElementById('CurrencyID');

                function setContributionAmountLimits() {
                    const selectedCurrencyId = currencySelect.value;
                    const selectedCurrencyText = currencySelect.options[currencySelect.selectedIndex].text;

                    if (selectedCurrencyText.includes("USD")) {
                        contributionAmountInput.min = 10;
                        contributionAmountInput.max = 100000;
                    } else {
                        contributionAmountInput.min = 10000;
                        contributionAmountInput.max = 1000000;
                    }

                    if (contributionAmountInput.value && !contributionAmountInput.checkValidity()) {
                        contributionAmountInput.reportValidity();
                    }
                }

                currencySelect.addEventListener('change', setContributionAmountLimits);
                setContributionAmountLimits();
            });
        </script>

        <div class="col-md-4">
            <label asp-for="CurrencyID" class="form-label">Currency</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-currency-exchange"></i></span>
                <select asp-for="CurrencyID" asp-items="Model.Currencies" class="form-select" id="CurrencyID">
                    <option value="">-- Select Currency --</option>
                </select>
            </div>
            <span asp-validation-for="CurrencyID" class="text-danger small"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="FrequencyID" class="form-label">Payment Frequency</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-clock"></i></span>
                <select asp-for="FrequencyID" asp-items="Model.FrequencyOptions" class="form-select">
                    <option value="">-- Select Frequency --</option>
                </select>
            </div>
            <span asp-validation-for="FrequencyID" class="text-danger small"></span>
        </div>
    </div>

    <!-- Group Configuration -->
    <h5 class="mt-5 fw-semibold text-secondary">Group Configuration</h5>
    <div class="row g-4">
        <div class="col-md-4">
            <label asp-for="PayoutTypeID" class="form-label">Payout Type</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-shuffle"></i></span>
                <select asp-for="PayoutTypeID" asp-items="Model.PayoutTypes" class="form-select">
                    <option value="">-- Select Payout Type --</option>
                </select>
            </div>
            <span asp-validation-for="PayoutTypeID" class="text-danger small"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="MemberLimit" class="form-label">Member Limit</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-person-plus-fill"></i></span>
                <input asp-for="MemberLimit" class="form-control" min="2" max="100" />
            </div>
            <span asp-validation-for="MemberLimit" class="text-danger small"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="Duration" class="form-label">Duration (x Frequency)</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-hourglass-split"></i></span>
                <input asp-for="Duration" class="form-control" />
            </div>
            <span asp-validation-for="Duration" class="text-danger small"></span>
        </div>
    </div>

    <!-- Penalty Settings -->
    <h5 class="mt-5 fw-semibold text-secondary">Penalty Settings</h5>
    <div class="row g-4">
        <div class="col-md-6">
            <label asp-for="PenaltyAmount" class="form-label">Penalty Amount</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-exclamation-triangle"></i></span>
                <input asp-for="PenaltyAmount" class="form-control" />
            </div>
            <span asp-validation-for="PenaltyAmount" class="text-danger small"></span>
        </div>

        <div class="col-md-6">
            <label asp-for="PenaltyGraceDays" class="form-label">Grace Period (Days)</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-clock-history"></i></span>
                <input asp-for="PenaltyGraceDays" class="form-control" id="penaltyGraceDaysInput" />
            </div>
            <span asp-validation-for="PenaltyGraceDays" class="text-danger small"></span>
        </div>
    </div>

    <!-- Other Settings -->
    <h5 class="mt-5 fw-semibold text-secondary">Other Settings</h5>
    <div class="row g-4 align-items-center">
        <div class="col-md-6">
            <div class="form-check mt-4">
                <input asp-for="AllowDeferrals" class="form-check-input" />
                <label asp-for="AllowDeferrals" class="form-check-label ms-2">Allow Deferrals</label>
            </div>
        </div>

        <div class="col-md-6">
            <label asp-for="CreatedDate" class="form-label">Creation Date</label>
            <div class="input-group">
                <span class="input-group-text"><i class="bi bi-calendar-check"></i></span>
                <input type="date" class="form-control" value="@Model.CreatedDate.ToString("yyyy-MM-dd")" disabled />
                <input asp-for="CreatedDate" type="hidden" />
            </div>
        </div>
    </div>

    <!-- Submit Button -->
    <div class="text-end mt-5">
        <button type="submit" class="btn btn-success px-5 py-2 shadow-sm">
            <i class="bi bi-plus-circle me-2"></i>Create Group
        </button>
    </div>
</form> <!-- ✅ Closing tag was missing -->

    </div>

@{
    var jwtCookie = Context.Request.Cookies["jwt"];
    var hasBankDetailsCookie = Context.Request.Cookies["HasBankDetails"];
    bool hasBankDetails = string.IsNullOrEmpty(hasBankDetailsCookie) ? true : bool.Parse(hasBankDetailsCookie);
    bool canJoin = hasBankDetails;
}





@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

 <script>
    // Razor outputs "true" or "false" directly into JS
    const canJoin = @canJoin.ToString().ToLower();
    console.log("jwtCookie:", "@jwtCookie");
    console.log("hasBankDetails:", @hasBankDetails.ToString().ToLower());
    console.log("canJoin:", @canJoin.ToString().ToLower());
</script>   

<script>
    // Inject ViewBag.CreateError into JavaScript and set localStorage flag
    const createError = @((ViewBag.CreateError ?? false).ToString().ToLower());
    if (createError === true) {
        localStorage.setItem("createError", "true");
    }

    document.addEventListener('DOMContentLoaded', function () {
        const urlParams = new URLSearchParams(window.location.search);
        const isAdmin = document.cookie
            .split('; ')
            .find(row => row.startsWith('isAdmin='))
            ?.split('=')[1] === "true";

        const showCreate = urlParams.get("showCreate")?.toLowerCase() === "true";
        const createError = localStorage.getItem("createError") === "true";

        // 👇 Activate Create tab if either condition is true
        if (showCreate || createError) {
            activateTab('create');
        }
        // If not admin, default to "New" tab instead of "Joined"
        else if (!showCreate) {
            activateTab('new');
        }

        // Clear the flag after use
        if (createError) {
            localStorage.removeItem("createError");
        }

        // Logic for PenaltyGraceDays based on FrequencyID
        const frequencySelect = document.getElementById('FrequencyID');
        const penaltyGraceDaysInput = document.getElementById('penaltyGraceDaysInput');

        function updatePenaltyGraceDays() {
            const selectedFrequency = frequencySelect.options[frequencySelect.selectedIndex].text;
            if (selectedFrequency === "Daily") {
                penaltyGraceDaysInput.value = 0;
                penaltyGraceDaysInput.readOnly = true;
            } else {
                penaltyGraceDaysInput.readOnly = false;
            }
        }        // Add validation for Duration based on FrequencyID
        const durationInput = document.getElementById('penaltyGraceDaysInput');

        function validateDuration() {
            const selectedFrequency = frequencySelect.options[frequencySelect.selectedIndex].text;
            const duration = parseInt(durationInput.value);

            if (isNaN(duration) || duration <= 0) {
                durationInput.setCustomValidity("Duration must be a positive number.");
                return;
            }

            if (selectedFrequency === "Weekly" && duration > 1) {
                durationInput.setCustomValidity("Weekly groups cannot have a period greater than 1 day.");
                durationInput.value = 1;
            } else if (selectedFrequency === "Monthly" && duration > 4) {
                durationInput.setCustomValidity("Monthly groups cannot have a period greater than 4 days.");
                durationInput.value = 4;
            } else if (selectedFrequency === "Yearly" && duration > 15) {
                durationInput.setCustomValidity("Yearly groups cannot have a period greater than 15 days.");
                durationInput.value = 15;
            } else {
                durationInput.setCustomValidity(""); // Clear custom validity
            }
            durationInput.reportValidity();
        }

        frequencySelect.addEventListener('change', validateDuration);
        durationInput.addEventListener('input', validateDuration);
        validateDuration(); // Call on load to set initial state

        frequencySelect.addEventListener('change', updatePenaltyGraceDays);
        updatePenaltyGraceDays(); // Call on load to set initial state

        function activateTab(tabId) {
            document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));
            document.querySelectorAll('.tab-pane').forEach(pane => pane.classList.remove('show', 'active'));

            document.getElementById(`${tabId}-tab`)?.classList.add('active');
            document.getElementById(tabId)?.classList.add('show', 'active');
        }

        // Load new groups immediately if "New" tab is active
        if (document.getElementById('new')?.classList.contains('show')) {
            loadNewGroups();
        }

        // Load new groups when "New" tab is clicked
        const newTabBtn = document.getElementById('new-tab');
        if (newTabBtn) {
            newTabBtn.addEventListener('shown.bs.tab', loadNewGroups);
        }

        function isValidDate(value) {
            const d = new Date(value);
            return value && !isNaN(d.getTime());
        }


        async function loadNewGroups() {
            try {
                const response = await fetch('/Groups/GetNewGroups');
                if (!response.ok) throw new Error('Network response was not ok');
                const groups = await response.json();

                const container = document.getElementById('newGroupsContainer');
                container.innerHTML = ''; // clear old content

                if (groups.length === 0) {
                    container.innerHTML = '<p class="text-muted">No new groups found.</p>';
                    return;
                }

                const frequencies = ["Daily", "Monthly", "Annually", "Weekly", "Periodic"];


                frequencies.forEach(freq => {
                    const freqGroups = groups.filter(g => g.frequencyName === freq);
                    if (freqGroups.length > 0) {
                        let html = `<div class="group-section mb-5">
                                        <h4 class="mb-3">${freq} Groups</h4>
                                        <div class="row">`;

                        freqGroups.forEach(group => {
                            const nationalId = document.getElementById('nationalId')?.value || '';
                             console.log(group.closed +"this is closed")
                            html += `
                            <div class="col-md-4">
                                <div class="card shadow-sm mb-4">
                                    <div class="frequency-accent ${freq}"></div>
                                    <div class="card-body">
                                        <h5 class="card-title">${group.groupName}</h5>
                                        <p class="card-text"><strong>Contribution:</strong> ${(group.currency ?? "R")} ${parseFloat(group.contributionAmount).toFixed(2)}</p>
                                        <p class="card-text"><strong>Members:</strong> Up to ${group.memberLimit}</p>
                                        <p class="card-text"><strong>Payout Type:</strong> ${group.payoutType}</p>
                                        <p class="card-text"><strong>Frequency:</strong> ${group.frequencyName}</p>
                                        <p class="card-text"><strong>Duration:</strong> ${group.duration}</p>
                                        <p class="card-text"><strong>Start Date:</strong> ${group.startDate ? new Date(group.startDate).toLocaleDateString() : 'Not Set'}</p>
                                        <p class="card-text"><strong>Penalty:</strong> ${(group.currency ?? "R")} ${parseFloat(group.penaltyAmount).toFixed(2)} after ${group.penaltyGraceDays} days</p>
                                        <p class="card-text"><strong>Deferrals:</strong> ${group.allowDeferrals ? 'Allowed' : 'Not Allowed'}</p>
                                        <p class="card-text"><strong>Status:</strong> ${group.status === "1" ? 'Active' : 'Inactive' }</p>
                                        <p class="card-text">
                                        <strong>Applications:</strong> 
                                        <span class="badge ${(group.closed === true && isValidDate(group.startDate)) ? 'bg-danger' : 'bg-success'}">
                                            ${(group.closed === true && isValidDate(group.startDate)) ? 'Closed' : 'Open'}
                                        </span>
                                        </p>

                                        <form action="/Groups/RequestToJoin" method="get">
                                            <input type="hidden" name="GroupId" value="${group.id}" />
                                            <input type="hidden" name="NationalId" value="${nationalId}" />
                                            ${canJoin && group.status === "1" && group.closed === false ? `<button type="submit" class="btn btn-success w-100">Request To Join Group</button>` : ""}
                                        </form>
                                    </div>
                                </div>
                            </div>`;
                        });

                        html += `</div></div>`;
                        container.insertAdjacentHTML('beforeend', html);
                    }
                });
            } catch (error) {
                console.error('Failed to load new groups:', error);
                document.getElementById('newGroupsContainer').innerHTML = '<p class="text-danger">Failed to load groups.</p>';
            }
        }

    });
</script>

    
}

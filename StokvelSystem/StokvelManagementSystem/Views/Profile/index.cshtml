@model StokvelManagementSystem.Models.Member

@{
    ViewData["Title"] = "My Profile";
}

@section Styles {
    <link rel="stylesheet" href="@Url.Content("~/css/registration.css")" />
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
}

<h2 class="text-center page-title">My Profile</h2>

<div class="card p-4 mx-auto" style="max-width: 900px;">
    <form asp-controller="Profile" asp-action="Index" method="post">
        @Html.AntiForgeryToken()

        <h3 class="form-section-title mb-4">Personal Details</h3>
        <div class="row mb-3">
            <div class="col-md-4">
                <input asp-for="FirstName" class="form-control" placeholder="First Name" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="MiddleName" class="form-control" placeholder="Middle Name" />
                <span asp-validation-for="MiddleName" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="LastName" class="form-control" placeholder="Last Name" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <input asp-for="DOB" type="date" class="form-control" />
                <span asp-validation-for="DOB" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="NationalID" class="form-control" placeholder="National ID" />
                <span asp-validation-for="NationalID" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="Phone" class="form-control" placeholder="Phone Number" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <input asp-for="Email" type="email" class="form-control" placeholder="Email" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>
            <div class="col-md-6">
                <select asp-for="GenderID" asp-items="ViewBag.GenderList" class="form-control">
                    <option value="">-- Select Gender --</option>
                </select>
                <span asp-validation-for="GenderID" class="text-danger"></span>
            </div>
        </div>

        <div class="mb-3">
            <textarea asp-for="Address" class="form-control" rows="3" placeholder="Enter your address"></textarea>
            <span asp-validation-for="Address" class="text-danger"></span>
        </div>

        <h3 class="form-section-title mb-4">Account Details</h3>
        <div class="row mb-3">
            <div class="col-md-4">
                <input asp-for="AccountNumber" id="AccountNumber" class="form-control" placeholder="Account Number" />
                <span asp-validation-for="AccountNumber" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="CVC" id="CVC" class="form-control" placeholder="CVC" maxlength="4" />
                <span asp-validation-for="CVC" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="Expiry" id="Expiry" class="form-control" placeholder="MM/YY" />
                <span asp-validation-for="Expiry" class="text-danger"></span>
            </div>
        </div>

        <h3 class="form-section-title mb-4">Login Details</h3>
        <div class="row mb-3">
            <div class="col-md-4">
                <input asp-for="Username" class="form-control" placeholder="Username" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="Password" type="password" class="form-control" placeholder="New Password (optional)" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="col-md-4">
                <input asp-for="ConfirmPassword" type="password" class="form-control" placeholder="Confirm Password" />
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>
        </div>

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-1"></i> Save Changes
            </button>
        </div>
        @if (ViewBag.AccountDeactivated == null || ViewBag.AccountDeactivated == false)
{
        <hr class="my-4">

        <div class="d-flex justify-content-between">
        @if (ViewBag.AccountPaused == null || ViewBag.AccountPaused == false)
        {
            <!-- Pause Account Button -->
            <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#pauseAccountModal">
                <i class="fas fa-pause-circle me-1"></i> Pause Account
            </button>
        }
        else
        {
            <!-- Resume Account Button -->
            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#resumeAccountModal">
                <i class="fas fa-play-circle me-1"></i> Resume Account
            </button>
        }


            <!-- Deactivate Button -->
            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deactivateAccountModal">
                <i class="fas fa-user-slash me-1"></i> Deactivate Account
            </button>
        </div>
}
    </form>
</div>

<!-- Modal for Update Status -->
<div class="modal fade" id="updateStatusModal" tabindex="-1" aria-labelledby="updateStatusLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateStatusLabel">Profile Update</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <!-- Placeholders for icon and message -->
                <div id="updateStatusIcon" class="mb-3"></div>
                <div id="updateStatusMessage"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@* Pause / Resume Account Modal *@

@if (ViewBag.AccountDeactivated == null || ViewBag.AccountDeactivated == false)
{
        @if (ViewBag.AccountPaused == null || ViewBag.AccountPaused == false)
        {
            @* Pause Account Modal *@
            <div class="modal fade" id="pauseAccountModal" tabindex="-1" aria-labelledby="pauseAccountLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header bg-warning text-dark">
                            <h5 class="modal-title" id="pauseAccountLabel">
                                <i class="fas fa-pause-circle me-2"></i> Pause Account
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body text-center">
                            <p class="fw-bold">Are you sure you want to <span class="text-warning">pause</span> your account?</p>
                            <p class="small text-muted">
                                While paused, you will not be able to contribute or receive payouts.  
                                You can log back in anytime to resume.
                            </p>
                        </div>
                        <div class="modal-footer">
                            <form asp-action="TogglePauseAccount" asp-controller="Profile" method="post">
                                @Html.AntiForgeryToken()
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-warning">Yes, Pause Account</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
        else 
        {
        @* Resume Account Modal *@
        <div class="modal fade" id="resumeAccountModal" tabindex="-1" aria-labelledby="resumeAccountLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title" id="resumeAccountLabel">
                            <i class="fas fa-play-circle me-2"></i> Resume Account
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <p class="fw-bold">Your account is currently <span class="text-success">paused</span>.</p>
                        <p class="small text-muted">
                            Resuming your account will allow you to contribute and receive payouts again.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <form asp-action="TogglePauseAccount" asp-controller="Profile" method="post">
                            @Html.AntiForgeryToken()
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-success">Resume Account</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        }


        @* Deactivate Account Modal *@
        <div class="modal fade" id="deactivateAccountModal" tabindex="-1" aria-labelledby="deactivateAccountLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title" id="deactivateAccountLabel">
                            <i class="fas fa-user-slash me-2"></i> Deactivate Account
                        </h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <p class="fw-bold text-danger">This action is permanent!</p>
                        <p class="small text-muted">
                            Deactivating your account will remove your membership and all associated data.  
                            You will not be able to log in again.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <form asp-action="DeactivateAccount" asp-controller="Profile" method="post">
                            @Html.AntiForgeryToken()
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-danger">Yes, Deactivate Permanently</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
}









@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <partial name="_ValidationScriptsPartial" />

<script>
document.addEventListener("DOMContentLoaded", function () {

       // Flag from Razor
    const accountDeactivated = @((ViewBag.AccountDeactivated ?? false).ToString().ToLower());

    
    const form = document.querySelector("form");
    const saveBtn = form.querySelector('button[type="submit"]');

    const accountNumberInput = document.querySelector("#AccountNumber");
    const cvcInput = document.querySelector("#CVC");
    const expiryInput = document.querySelector("#Expiry");

    const accountNumberError = accountNumberInput.nextElementSibling;
    const cvcError = cvcInput.nextElementSibling;
    const expiryError = expiryInput.nextElementSibling;

    // Store initial values of all fields
    const inputs = Array.from(form.querySelectorAll("input, textarea, select"));
    const initialValues = {};
    inputs.forEach(input => initialValues[input.id || input.name] = input.value);

    function disableFormIfDeactivated(formSelector) {
        if (!accountDeactivated) return;

        const form = document.querySelector(formSelector);
        if (!form) return;

        // Disable all inputs, textareas, selects
        form.querySelectorAll("input, textarea, select").forEach(el => {
            el.readOnly = true; // for text, password, email, number, date, textarea
            el.disabled = true; // ensures select & buttons are disabled
        });

        // Disable submit buttons
        form.querySelectorAll("button[type='submit']").forEach(btn => btn.disabled = true);

        // Optional overlay to indicate form is inactive
        const overlay = document.createElement("div");
        const rect = form.getBoundingClientRect();
        overlay.style.position = "absolute";
        overlay.style.top = form.offsetTop + "px";
        overlay.style.left = form.offsetLeft + "px";
        overlay.style.width = form.offsetWidth + "px";
        overlay.style.height = form.offsetHeight + "px";
        overlay.style.backgroundColor = "rgba(255,255,255,0.6)";
        overlay.style.zIndex = 10;
        overlay.style.borderRadius = "0.25rem";
        form.parentElement.style.position = "relative";
        form.parentElement.appendChild(overlay);

        // Message
        const msg = document.createElement("p");
        msg.textContent = "This account has been deactivated. All actions are disabled.";
        msg.className = "text-center text-danger fw-bold mt-3";
        form.parentElement.appendChild(msg);
    }

    disableFormIfDeactivated("form");

    function isFormChanged() {
        return inputs.some(input => input.value !== (initialValues[input.id || input.name] || ""));
    }

    function hasValidationErrors() {
        return (
            !accountNumberInput.value || accountNumberInput.validationMessage ||
            !cvcInput.value || cvcInput.validationMessage ||
            !expiryInput.value || expiryInput.validationMessage
        );
    }

    function updateSaveButtonState() {
        saveBtn.disabled = !isFormChanged() || hasValidationErrors();
    }

    // --- Validation functions ---
    function isValidLuhn(number) {
        let sum = 0;
        let shouldDouble = false;
        for (let i = number.length - 1; i >= 0; i--) {
            let digit = parseInt(number[i]);
            if (shouldDouble) {
                digit *= 2;
                if (digit > 9) digit -= 9;
            }
            sum += digit;
            shouldDouble = !shouldDouble;
        }
        return sum % 10 === 0;
    }

    function validateAccountNumber() {
        const value = accountNumberInput.value.trim();
        if (value === "" || (/^\d{8,16}$/.test(value) && isValidLuhn(value))) {
            accountNumberInput.setCustomValidity("");
            accountNumberError.textContent = "";
        } else {
            accountNumberInput.setCustomValidity("Invalid Account Number");
            accountNumberError.textContent = "Must be 8-16 digits and pass Luhn check";
        }
    }

    function validateCVC() {
        const value = cvcInput.value.trim();
        if (value === "" || /^\d{3,4}$/.test(value)) {
            cvcInput.setCustomValidity("");
            cvcError.textContent = "";
        } else {
            cvcInput.setCustomValidity("Invalid CVC");
            cvcError.textContent = "CVC must be 3 or 4 digits";
        }
    }

    function validateExpiry() {
        const value = expiryInput.value.trim();
        if (value === "") {
            expiryInput.setCustomValidity("Expiry required");
            expiryError.textContent = "Expiry must not be empty";
        } else {
            const match = /^(\d{2})\/(\d{2})$/.exec(value);
            if (match) {
                const month = parseInt(match[1], 10);
                const year = parseInt(match[2], 10) + 2000;
                const expiryDate = new Date(year, month - 1, 1);
                const today = new Date();
                today.setDate(1);
                if (expiryDate >= today && month >= 1 && month <= 12) {
                    expiryInput.setCustomValidity("");
                    expiryError.textContent = "";
                    return;
                }
            }
            expiryInput.setCustomValidity("Invalid Expiry");
            expiryError.textContent = "Expiry must be valid and not in the past";
        }
    }

    // Validate on input and update button
    [accountNumberInput, cvcInput, expiryInput].forEach(input => {
        input.addEventListener("input", () => {
            validateAccountNumber();
            validateCVC();
            validateExpiry();
            updateSaveButtonState();
        });
    });

    // Update button initially
    validateAccountNumber();
    validateCVC();
    validateExpiry();
    updateSaveButtonState();

    // Prevent submission if invalid
    form.addEventListener("submit", function (e) {
        if (!form.checkValidity()) {
            e.preventDefault();
            e.stopPropagation();
        }
    });

    // --- Modal logic ---
    const successMessage = "@ViewBag.SuccessMessage";
    const errorMessage = "@ViewBag.ErrorMessage";

    if (successMessage || errorMessage) {
        const modal = new bootstrap.Modal(document.getElementById('updateStatusModal'));
        const iconContainer = document.getElementById('updateStatusIcon');
        const messageContainer = document.getElementById('updateStatusMessage');

        if (successMessage) {
            const bankDetailsLink = document.getElementById('update-bank-details');
            if (bankDetailsLink) bankDetailsLink.remove();

            iconContainer.innerHTML = `
                <div style="width:80px; height:80px; background-color:#28a745; border-radius:50%; display:flex; align-items:center; justify-content:center; margin:auto;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="white" class="bi bi-check2" viewBox="0 0 16 16">
                        <path d="M13.854 3.646a.5.5 0 0 0-.708 0L6 10.793 2.854 7.646a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l7.5-7.5a.5.5 0 0 0 0-.708z"/>
                    </svg>
                </div>`;
            messageContainer.textContent = successMessage;
            messageContainer.className = "fs-5 fw-bold text-success text-center";
        } else {
            iconContainer.innerHTML = `
                <div style="width:80px; height:80px; background-color:#dc3545; border-radius:50%; display:flex; align-items:center; justify-content:center; margin:auto;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="white" class="bi bi-x-lg" viewBox="0 0 16 16">
                        <path d="M2.146 2.146a.5.5 0 1 1 .708.708L2.707 3.707 7.5 8.5l-4.793 4.793a.5.5 0 0 1-.708-.708L6.293 8.5 2.146 4.354a.5.5 0 0 1 0-.708z"/>
                    </svg>
                </div>`;
            messageContainer.textContent = errorMessage;
            messageContainer.className = "fs-5 fw-bold text-danger text-center";
        }

        modal.show();
    }

});
</script>


}
